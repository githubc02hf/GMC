package at.campus02.gmc.ebike.controller;

import at.campus02.gmc.ebike.model.Address;
import at.campus02.gmc.ebike.model.User;
import at.campus02.gmc.ebike.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/users") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @PostMapping(path = "/register")
    public @ResponseBody
    Integer registerUser(@RequestParam String firstName, @RequestParam String lastName
            , @RequestParam String password, @RequestParam String email, @RequestParam String city
            ,@RequestParam String street, @RequestParam Integer streetNumber, @RequestParam Integer postalCode) {

        User user = new User();
        user.setPassword(password);
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setEmail(email);

//        TODO does address already exists?
        Address address = new Address();
        address.setCity(city);
        address.setPostalCode(postalCode);
        address.setStreetName(street);
        address.setStreetNumber(streetNumber);

        user.setAddress(address);

        user = userRepository.save(user);
        return user.getId();
    }

    @GetMapping(path = "/login")
    public @ResponseBody
    User loginUser(@RequestParam String email, @RequestParam String password) {
        // This returns a JSON or XML with the users
        return userRepository.queryByEmailAndPassword(email, password);
    }

    @GetMapping(path = "/profile")
    public @ResponseBody
    User getUserProfile(@RequestParam String email) {
        return userRepository.queryBy(email);
    }

    @PostMapping(path = "/profile/edit")
    public @ResponseBody
    User editUser(@RequestParam String email, @RequestParam String password, @RequestParam String firstName,
                  @RequestParam String lastName) {

        User user = userRepository.queryBy(email);
        user.setPassword(password);
        user.setFirstName(firstName);
        user.setLastName(lastName);

        return userRepository.save(user);
    }

}